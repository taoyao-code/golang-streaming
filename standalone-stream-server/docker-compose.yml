version: '3.8'

services:
  # 主视频流媒体服务
  video-streaming-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: standalone-stream-server
    ports:
      - "9000:9000"
    volumes:
      # 视频文件存储
      - ./videos:/app/videos:ro
      # 配置文件
      - ./configs:/app/configs:ro
      # 数据持久化
      - streaming_data:/app/data
      # 日志
      - streaming_logs:/app/logs
    environment:
      - TZ=Asia/Shanghai
      - LOG_LEVEL=info
      - LOG_FORMAT=json
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - streaming-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.streaming.rule=Host(`streaming.local`)"
      - "traefik.http.routers.streaming.entrypoints=web"
      - "traefik.http.services.streaming.loadbalancer.server.port=9000"

  # Nginx 反向代理（可选，用于生产环境）
  nginx:
    image: nginx:1.25-alpine
    container_name: streaming-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    depends_on:
      - video-streaming-server
    restart: unless-stopped
    networks:
      - streaming-network
    profiles:
      - production

  # Prometheus 监控（可选）
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: streaming-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - streaming-network
    profiles:
      - monitoring

  # Grafana 仪表板（可选）
  grafana:
    image: grafana/grafana:10.1.0
    container_name: streaming-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - streaming-network
    profiles:
      - monitoring

  # Redis 缓存（可选，用于会话管理）
  redis:
    image: redis:7.2-alpine
    container_name: streaming-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass streaming123
    restart: unless-stopped
    networks:
      - streaming-network
    profiles:
      - production

  # PostgreSQL 数据库（可选，用于元数据存储）
  postgres:
    image: postgres:15.4-alpine
    container_name: streaming-postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    environment:
      - POSTGRES_DB=streaming
      - POSTGRES_USER=streaming
      - POSTGRES_PASSWORD=streaming123
    restart: unless-stopped
    networks:
      - streaming-network
    profiles:
      - production

volumes:
  streaming_data:
    driver: local
  streaming_logs:
    driver: local
  nginx_cache:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local

networks:
  streaming-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16